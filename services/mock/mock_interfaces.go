// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -package=mock_services -destination=./mock/mock_interfaces.go
//

// Package mock_services is a generated GoMock package.
package mock_services

import (
	context "context"
	reflect "reflect"
	time "time"

	services "github.com/jackchuka/gh-oss-watch/services"
	gomock "go.uber.org/mock/gomock"
)

// MockConfigService is a mock of ConfigService interface.
type MockConfigService struct {
	ctrl     *gomock.Controller
	recorder *MockConfigServiceMockRecorder
	isgomock struct{}
}

// MockConfigServiceMockRecorder is the mock recorder for MockConfigService.
type MockConfigServiceMockRecorder struct {
	mock *MockConfigService
}

// NewMockConfigService creates a new mock instance.
func NewMockConfigService(ctrl *gomock.Controller) *MockConfigService {
	mock := &MockConfigService{ctrl: ctrl}
	mock.recorder = &MockConfigServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigService) EXPECT() *MockConfigServiceMockRecorder {
	return m.recorder
}

// GetConfigPath mocks base method.
func (m *MockConfigService) GetConfigPath() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigPath")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigPath indicates an expected call of GetConfigPath.
func (mr *MockConfigServiceMockRecorder) GetConfigPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigPath", reflect.TypeOf((*MockConfigService)(nil).GetConfigPath))
}

// Load mocks base method.
func (m *MockConfigService) Load() (*services.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load")
	ret0, _ := ret[0].(*services.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *MockConfigServiceMockRecorder) Load() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockConfigService)(nil).Load))
}

// Save mocks base method.
func (m *MockConfigService) Save(config *services.Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", config)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockConfigServiceMockRecorder) Save(config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockConfigService)(nil).Save), config)
}

// MockCacheService is a mock of CacheService interface.
type MockCacheService struct {
	ctrl     *gomock.Controller
	recorder *MockCacheServiceMockRecorder
	isgomock struct{}
}

// MockCacheServiceMockRecorder is the mock recorder for MockCacheService.
type MockCacheServiceMockRecorder struct {
	mock *MockCacheService
}

// NewMockCacheService creates a new mock instance.
func NewMockCacheService(ctrl *gomock.Controller) *MockCacheService {
	mock := &MockCacheService{ctrl: ctrl}
	mock.recorder = &MockCacheServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheService) EXPECT() *MockCacheServiceMockRecorder {
	return m.recorder
}

// Load mocks base method.
func (m *MockCacheService) Load() (*services.CacheData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load")
	ret0, _ := ret[0].(*services.CacheData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *MockCacheServiceMockRecorder) Load() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockCacheService)(nil).Load))
}

// Save mocks base method.
func (m *MockCacheService) Save(cache *services.CacheData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", cache)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockCacheServiceMockRecorder) Save(cache any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockCacheService)(nil).Save), cache)
}

// MockGitHubAPIClient is a mock of GitHubAPIClient interface.
type MockGitHubAPIClient struct {
	ctrl     *gomock.Controller
	recorder *MockGitHubAPIClientMockRecorder
	isgomock struct{}
}

// MockGitHubAPIClientMockRecorder is the mock recorder for MockGitHubAPIClient.
type MockGitHubAPIClientMockRecorder struct {
	mock *MockGitHubAPIClient
}

// NewMockGitHubAPIClient creates a new mock instance.
func NewMockGitHubAPIClient(ctrl *gomock.Controller) *MockGitHubAPIClient {
	mock := &MockGitHubAPIClient{ctrl: ctrl}
	mock.recorder = &MockGitHubAPIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitHubAPIClient) EXPECT() *MockGitHubAPIClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockGitHubAPIClient) Get(ctx context.Context, path string, response any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, path, response)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockGitHubAPIClientMockRecorder) Get(ctx, path, response any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockGitHubAPIClient)(nil).Get), ctx, path, response)
}

// GetPullRequests mocks base method.
func (m *MockGitHubAPIClient) GetPullRequests(ctx context.Context, owner, repo string) ([]services.PullRequestAPIData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPullRequests", ctx, owner, repo)
	ret0, _ := ret[0].([]services.PullRequestAPIData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPullRequests indicates an expected call of GetPullRequests.
func (mr *MockGitHubAPIClientMockRecorder) GetPullRequests(ctx, owner, repo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullRequests", reflect.TypeOf((*MockGitHubAPIClient)(nil).GetPullRequests), ctx, owner, repo)
}

// GetRepoData mocks base method.
func (m *MockGitHubAPIClient) GetRepoData(ctx context.Context, owner, repo string) (*services.RepoAPIData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepoData", ctx, owner, repo)
	ret0, _ := ret[0].(*services.RepoAPIData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepoData indicates an expected call of GetRepoData.
func (mr *MockGitHubAPIClientMockRecorder) GetRepoData(ctx, owner, repo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepoData", reflect.TypeOf((*MockGitHubAPIClient)(nil).GetRepoData), ctx, owner, repo)
}

// MockGitHubService is a mock of GitHubService interface.
type MockGitHubService struct {
	ctrl     *gomock.Controller
	recorder *MockGitHubServiceMockRecorder
	isgomock struct{}
}

// MockGitHubServiceMockRecorder is the mock recorder for MockGitHubService.
type MockGitHubServiceMockRecorder struct {
	mock *MockGitHubService
}

// NewMockGitHubService creates a new mock instance.
func NewMockGitHubService(ctrl *gomock.Controller) *MockGitHubService {
	mock := &MockGitHubService{ctrl: ctrl}
	mock.recorder = &MockGitHubServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitHubService) EXPECT() *MockGitHubServiceMockRecorder {
	return m.recorder
}

// GetRepoStats mocks base method.
func (m *MockGitHubService) GetRepoStats(owner, repo string) (*services.RepoStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepoStats", owner, repo)
	ret0, _ := ret[0].(*services.RepoStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepoStats indicates an expected call of GetRepoStats.
func (mr *MockGitHubServiceMockRecorder) GetRepoStats(owner, repo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepoStats", reflect.TypeOf((*MockGitHubService)(nil).GetRepoStats), owner, repo)
}

// RepoExists mocks base method.
func (m *MockGitHubService) RepoExists(owner, repo string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RepoExists", owner, repo)
	ret0, _ := ret[0].(error)
	return ret0
}

// RepoExists indicates an expected call of RepoExists.
func (mr *MockGitHubServiceMockRecorder) RepoExists(owner, repo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepoExists", reflect.TypeOf((*MockGitHubService)(nil).RepoExists), owner, repo)
}

// SetMaxConcurrent mocks base method.
func (m *MockGitHubService) SetMaxConcurrent(maxConcurrent int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMaxConcurrent", maxConcurrent)
}

// SetMaxConcurrent indicates an expected call of SetMaxConcurrent.
func (mr *MockGitHubServiceMockRecorder) SetMaxConcurrent(maxConcurrent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMaxConcurrent", reflect.TypeOf((*MockGitHubService)(nil).SetMaxConcurrent), maxConcurrent)
}

// SetTimeout mocks base method.
func (m *MockGitHubService) SetTimeout(timeout time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTimeout", timeout)
}

// SetTimeout indicates an expected call of SetTimeout.
func (mr *MockGitHubServiceMockRecorder) SetTimeout(timeout any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTimeout", reflect.TypeOf((*MockGitHubService)(nil).SetTimeout), timeout)
}

// MockBatchGitHubService is a mock of BatchGitHubService interface.
type MockBatchGitHubService struct {
	ctrl     *gomock.Controller
	recorder *MockBatchGitHubServiceMockRecorder
	isgomock struct{}
}

// MockBatchGitHubServiceMockRecorder is the mock recorder for MockBatchGitHubService.
type MockBatchGitHubServiceMockRecorder struct {
	mock *MockBatchGitHubService
}

// NewMockBatchGitHubService creates a new mock instance.
func NewMockBatchGitHubService(ctrl *gomock.Controller) *MockBatchGitHubService {
	mock := &MockBatchGitHubService{ctrl: ctrl}
	mock.recorder = &MockBatchGitHubServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBatchGitHubService) EXPECT() *MockBatchGitHubServiceMockRecorder {
	return m.recorder
}

// GetRepoStats mocks base method.
func (m *MockBatchGitHubService) GetRepoStats(owner, repo string) (*services.RepoStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepoStats", owner, repo)
	ret0, _ := ret[0].(*services.RepoStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepoStats indicates an expected call of GetRepoStats.
func (mr *MockBatchGitHubServiceMockRecorder) GetRepoStats(owner, repo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepoStats", reflect.TypeOf((*MockBatchGitHubService)(nil).GetRepoStats), owner, repo)
}

// GetRepoStatsBatch mocks base method.
func (m *MockBatchGitHubService) GetRepoStatsBatch(repos []string) ([]*services.RepoStats, []error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepoStatsBatch", repos)
	ret0, _ := ret[0].([]*services.RepoStats)
	ret1, _ := ret[1].([]error)
	return ret0, ret1
}

// GetRepoStatsBatch indicates an expected call of GetRepoStatsBatch.
func (mr *MockBatchGitHubServiceMockRecorder) GetRepoStatsBatch(repos any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepoStatsBatch", reflect.TypeOf((*MockBatchGitHubService)(nil).GetRepoStatsBatch), repos)
}

// RepoExists mocks base method.
func (m *MockBatchGitHubService) RepoExists(owner, repo string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RepoExists", owner, repo)
	ret0, _ := ret[0].(error)
	return ret0
}

// RepoExists indicates an expected call of RepoExists.
func (mr *MockBatchGitHubServiceMockRecorder) RepoExists(owner, repo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepoExists", reflect.TypeOf((*MockBatchGitHubService)(nil).RepoExists), owner, repo)
}

// SetMaxConcurrent mocks base method.
func (m *MockBatchGitHubService) SetMaxConcurrent(maxConcurrent int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMaxConcurrent", maxConcurrent)
}

// SetMaxConcurrent indicates an expected call of SetMaxConcurrent.
func (mr *MockBatchGitHubServiceMockRecorder) SetMaxConcurrent(maxConcurrent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMaxConcurrent", reflect.TypeOf((*MockBatchGitHubService)(nil).SetMaxConcurrent), maxConcurrent)
}

// SetTimeout mocks base method.
func (m *MockBatchGitHubService) SetTimeout(timeout time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTimeout", timeout)
}

// SetTimeout indicates an expected call of SetTimeout.
func (mr *MockBatchGitHubServiceMockRecorder) SetTimeout(timeout any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTimeout", reflect.TypeOf((*MockBatchGitHubService)(nil).SetTimeout), timeout)
}

// MockOutput is a mock of Output interface.
type MockOutput struct {
	ctrl     *gomock.Controller
	recorder *MockOutputMockRecorder
	isgomock struct{}
}

// MockOutputMockRecorder is the mock recorder for MockOutput.
type MockOutputMockRecorder struct {
	mock *MockOutput
}

// NewMockOutput creates a new mock instance.
func NewMockOutput(ctrl *gomock.Controller) *MockOutput {
	mock := &MockOutput{ctrl: ctrl}
	mock.recorder = &MockOutputMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOutput) EXPECT() *MockOutputMockRecorder {
	return m.recorder
}

// Printf mocks base method.
func (m *MockOutput) Printf(format string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Printf", varargs...)
}

// Printf indicates an expected call of Printf.
func (mr *MockOutputMockRecorder) Printf(format any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Printf", reflect.TypeOf((*MockOutput)(nil).Printf), varargs...)
}

// Println mocks base method.
func (m *MockOutput) Println(args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Println", varargs...)
}

// Println indicates an expected call of Println.
func (mr *MockOutputMockRecorder) Println(args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Println", reflect.TypeOf((*MockOutput)(nil).Println), args...)
}
